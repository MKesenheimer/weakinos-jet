(* ::Package:: *)

(*
This package defines additional functions which can for example calculate spin
correlated amplitudes for the POWHEG-BOX-V2. FormCalc V9.4 or higher is required.
Please copy FormCalcAdd.m and SpinCorrelatedSum.frm to your
local FormCalc installation:
$<FORMCALC-PATH>/FormCalcAdd.m
$<FORMCALC-PATH>/FormCalc/SpinCorrelatedSum.frm

Copied and modified on the basis of FormCalc94.m with thanks to Thomas 
Hahn.
*)

BeginPackage["FormCalc`"]

(*Global variables*)
{Sfe6,Sfe6c,al,be,al0,be0,dcmplx}

SpinCorrelatedSum::usage =
"SpinCorrelatedSum[expr] sums expr over the polarizations of external
gauge bosons but leaves the two lorentz indices (al, be) uncontracted.
See arXiv:1002.2581 page 9 for more details.
It is assumed that expr is the squared amplitude into
which the helicity matrix elements have already been inserted. 
Alternatively, expr may also be given as an amplitude directly, in which
case SpinCorrelatedSum will first invoke SquaredME and HelicityME (with
Hel[_] = 0) to obtain the squared amplitude."

PolarizationSum2::usage =
"PolarizationSum2[expr] sums expr over the polarizations of external
gauge bosons.  It is assumed that expr is the squared amplitude into
which the helicity matrix elements have already been inserted. 
Alternatively, expr may also be given as an amplitude directly, in which
case PolarizationSum will first invoke SquaredME and HelicityME (with
Hel[_] = 0) to obtain the squared amplitude."

ExtendRuleByConjugate::usage = 
"ExtendRuleByConjugate[rule] conjugates the substitution rule generated
by FormCalc and appends the result to rule."

ConjugateRule::usage = 
"ConjugateRule[rule] conjugates the substition rule generated by 
FormCalc. The expression ConjugateRule[{Sub1[ind]->f[ind]}] gives
{Conjugate[Sub1[indc]]->Conjugate[f[indc]]}."

RemoveUnusedAbbr::usage =
"RemovedUnusedAbbr[expr, abbr] looks if the abbreviation abbr is part of 
the expression and gives it back."

LoopRemove::usage =
"LoopRemove[expr, abbr] works like RemovedUnusedAbbr but looks more
aggressively into deeper levels of the expression. Calling this 
function may take a while to finish."

SubstitutionHead::usage =
"SubstitutionHead[a->b] gives back a."

SubstitutionTail::usage =
"SubstitutionTail[a->b] gives back b."

Component::usage =
"Component[FeynAmpList,n] gives back the n-th part of a FeynAmpList."

getProcess::usage = 
"getProcess[FeynAmpList] writes out the invoked process of the FeynAmpList."

GetVariables::usage =
"GetVariables[{a->1,b->2,c->3}] gives the list {a,b,c}"

GetValues::usage =
"GetValues[{a->1,b->2,c->3}] gives the list {1,2,3}"

GetArgument::usage = 
"GetArgument[f[x,y]] evaluates to {x,y}."

CountArgs::usage = 
"CountArgs[f[x1,x2,x3]] counts the arguments of a function f."

AmpSimplify::usage = 
"This functions compresses amplitudes with similar summation into a single expression.
Not using this function if the summation of an amplitude was modified, 
can cause FormCalc to write multiple times into the same file"

WriteStringn::usage =
"Write string and break line automatically."

UniqueName::usage = 
"Generate unique variable names (even for functions)."

AssignValues::usage = 
"Assign values to a list of names, AssignValues[{a,b},{1,2}] sets a=1 and b=2."

GetElementsWithArgs::usage = 
"GetElementsWithArgs[list_List,arg__] returns all elements of a list with the specified arguments."

GetElementsWithoutArgs::usage = 
"GetElementsWithoutArgs[list_List,arg__] returns all elements of a list with none of the specified arguments."

Subsetn::usage = 
"Subsetn[list_List,n_Integer] gives all subsets of n elements with overhang."

WriteMatrixElement::usage = 
"WriteMatrixElement[name_String,amp_,abbr_List,indices_List,functions_List,nlegs_Integer] 
writes out the amplitude given in variable <amp> with abbreviations <abbr>. All open 
indices must be defined in the list <indices>. The substitution list <functions> define which function names should be replaced.
<nlegs> is the number of legs of the diagrams."

WriteSpinCorrelatedMatrixElement::usage = 
"WriteSpinCorrelatedMatrixElement[name_String,ampmunu_,abbr_List,indices_List,functions_List,nlegs_Integer,spinleg_Integer] 
writes out the spin correlated amplitude given in variable <ampmunu> with abbreviations <abbr>. All open 
indices must be defined in the list <indices>. The substitution list <functions> define which function names should be replaced.
<nlegs> is the number of legs of the diagrams, <spinleg> is the number of the leg, that was used to calculate the spin correlation."

Cmplx::usage = 
"Wraps every real variable with a function dcmplx[] which allows fortran to interpret the real variable as a complex one.
Example: Cmplx[a+I b] yields a+I b where as Cmplx[a] gives dcmplx[a]. The variables a and b must be defined as reals:
$Assumptions=a\[Element]Reals&&b\[Element]Reals or use $Assumptions=_\[Element]Reals to define every occuring variable as real. 
Delete the assumptions with $Assumptions=True."

DenCoefficient::usage = 
"DenCoefficient[a/(b+c),(b+c)] yields a. Useful to extract coeffiecients of a factorial expression."

SplitList::usage = 
"Split a list into sublists according to the total string length of the included variables."

GetSumIndices::usage =
""

GetSumand::usage =
""

Begin["`Private`"]

Print[];
Print["FormCalcAdd 1.2.3 (23 Jan 2016)"];
Print["by Matthias Kesenheimer, with thanks to Thomas Hahn"];


(*helpful function to extract parts of a Feynman amplitude*)
Component[FeynAmpList_,n_]:=Replace[FeynAmpList,FeynAmpList[_][x__]:>{x}][[n]]
getProcess[FeynAmpList[proc1_ -> proc2_,___][amp__]]:=proc2

SubstitutionHead[a_->b_]:=a
SubstitutionTail[a_->b_]:=b


(*conjugate subexpressions*)
ConjugateVariable[a_Symbol]:=ToExpression[ToString[a]<>"c"]/;StringTake[ToString[a],-1]=!="c"
ConjugateVariable[a_Symbol]:=ToExpression[StringTake[ToString[a],StringLength[ToString[a]]-1]]/;StringTake[ToString[a],-1]==="c"
GetArgument[a__Symbol]:=Null
GetArgument[f_[a__]]:={a}
GetArgument[Conjugate[f_[a__]]]:={a}
ListToElements[list1_->list2_]:=Table[list1[[i]]->list2[[i]],{i,1,Length[list1]}]/.List->Sequence
ConjugateRuleElement[a_->b_]:=Sequence[Conjugate[a]->Conjugate[b]]/.{ListToElements[GetArgument[a]->Map[ConjugateVariable,GetArgument[a]]]}
ConjugateRule[rule_]:=Map[ConjugateRuleElement,rule]
ExtendRuleByConjugate[rule_]:=Join[rule,ConjugateRule[rule]]


(* performing the spin correlated sum analytically *)
Options[SpinCorrelatedSum] = {
  SumLegs -> All,
  Dimension -> 4,
  GaugeTerms -> True,
  NoBracket -> NoBracket,
  EditCode -> False,
  RetainFile -> False }

SpinCorrelatedSum::noprocess = "No process defined so far.  \
SpinCorrelatedSum works only after DeclareProcess or CalcFeynAmp."

SpinCorrelatedSum::incomp = "SpinCorrelatedSum used on an amplitude \
other than the last one set up by DeclareProcess or CalcFeynAmp."

SpinCorrelatedSum[amp:Amp[_][___].., opt___?OptionQ] :=
Block[ {Hel},
  ChkProc[{amp, CurrentProc}, SpinCorrelatedSum, Abort[]];
  _Hel = 0;
  SpinCorrelatedSum[
    SquaredME[amp] /.
      ($HelicityME = HelicityME[amp, FilterOpt[HelicityME, opt]]) /.
      ($ColourME = ColourME[amp, FilterOpt[ColourME, opt]]),
    opt ]
]

SpinCorrelatedSum[expr_, opt___?OptionQ] :=
Block[ {slegs, dim, gauge, nobrk, edit, retain,
fullexpr, lor, indices, legs, masses, etasubst, vars, hh, abbr,
subexpr, subexprc, rules},

  If[ CurrentProc === {},
    Message[SpinCorrelatedSum::noprocess];
    Abort[] ];
    
  {slegs, dim, gauge, nobrk, edit, retain} =
    ParseOpt[SpinCorrelatedSum, opt] /. Options[CalcFeynAmp];

  abbr = OptimizeAbbr[Abbr[]];
  subexpr = OptimizeAbbr[Subexpr[]];
  subexprc = ConjugateRule[subexpr];
  rules = Dispatch[Join[abbr, subexpr, subexprc]];
    
  fullexpr = expr //. rules /. FinalFormRules;
  lor = Cases[fullexpr, _Lor, Infinity] //Union;
  indices = FormIndices[[ Level[lor, {2}] ]];
  fullexpr = fullexpr /. Thread[lor -> indices];

  legs = Cases[fullexpr, Alt[ExtWF][i_] :> i,
    Infinity, Heads -> True] //Union;
  If[ slegs =!= All, legs = Intersection[legs, Flatten[{slegs}]] ];
  masses = Masses[CurrentProc][[legs]];

  fullexpr = fullexpr /. s -> e /. Reverse/@ FromFormRules /.
    {Eps -> "e_", MetricTensor -> "d_", Pair -> Dot} /.
    NoExpandRule /.
    FinalFormRules;

  etasubst = Block[{dv = DownValues[eta], eta},
    Cases[dv, _[_[lhs_], rhs_] :> (lhs -> rhs)] /. Reverse/@ FromFormRules];

  dim = If[dim === 0, D, 4];
  vars = FormVars[dim, {fullexpr, masses}, indices];

  hh = OpenForm["fc-spin-"];
  WriteString[hh, "\
#define Dim \"", ToString[dim], "\"\n\
#define GaugeTerms \"" <> ToString[gauge] <> "\"\n\
#define FermionChains \"None\"\n\n" <>
    vars[[1]] <> "\n\
#procedure EtaSubst\n" <>
    FormId[etasubst] <> "\
#endprocedure\n" <>
    FormProcs <>
    FormConst[vars, nobrk] <>
    FormCode["Common.frm"] <>
    FormCode["SpinCorrelatedSum.frm"]];

  Write[hh, "L SquaredME = ", fullexpr, ";"];

  (*
  WriteString[hh,
    "\n#call Prepare\n" <>
    MapThread[{"\n#call SpinCorrSum(", ToString[#1], ", ", ToForm[#2], ", ",
        ToString[If[FreeQ[fullexpr, (z | zc)[#1]], dim, Dminus4]], ")"}&,
      {legs, masses}] <>
    "\n\n#call ReplaceOpenLorentzIndices\n\n\n#call Emit\n"];
    *)
  WriteString[hh,
    "\n#call Prepare\n" <>
    MapThread[{"\n#call SpinCorrSum(", ToString[#1], ", ", ToForm[#2], ", ",
        ToString[If[FreeQ[fullexpr, (z | zc)[#1]], dim, Dminus4]], ")"}&,
      {legs, masses}] <>
    "\n\n#call ReplaceOpenLorentzIndices\n\n" <>
    MapThread[{"\n#call Emit(", ToForm[#], ")"}&,{masses}] <> "\n"
    ];
  Close[hh];

  nobrk = Alt[nobrk];	(* for DotSimplify *)
  FormPre[fullexpr];

  Plus@@ FormOutput[][edit, retain][[1]]
]


(* Matthias Kesenheimer: The function PolarizationSum of FormCalc does 
not evaluate large expressions correctly. There are still polarization 
vectors in the final result left over. To circumvent this, we have to 
apply the additional conjugated subexpressions to obtain the full 
expression before evaluating it with form. *)
(* performing the polarization sum analytically *)
Options[PolarizationSum2] = {
  SumLegs -> All,
  Dimension -> 4,
  GaugeTerms -> True,
  NoBracket -> NoBracket,
  EditCode -> False,
  RetainFile -> False }

PolarizationSum2::noprocess = "No process defined so far.  \
PolarizationSum2 works only after DeclareProcess or CalcFeynAmp."

PolarizationSum2::incomp = "PolarizationSum2 used on an amplitude \
other than the last one set up by DeclareProcess or CalcFeynAmp."

PolarizationSum2[amp:Amp[_][___].., opt___?OptionQ] :=
Block[ {Hel},
  ChkProc[{amp, CurrentProc}, PolarizationSum2, Abort[]];
  _Hel = 0;
  PolarizationSum2[
    SquaredME[amp] /.
      ($HelicityME = HelicityME[amp, FilterOpt[HelicityME, opt]]) /.
      ($ColourME = ColourME[amp, FilterOpt[ColourME, opt]]),
    opt ]
]

PolarizationSum2[expr_, opt___?OptionQ] :=
Block[ {slegs, dim, gauge, nobrk, edit, retain,
fullexpr, lor, indices, legs, masses, etasubst, vars, hh, abbr, 
subexpr, subexprc, rules},

  If[ CurrentProc === {},
    Message[PolarizationSum2::noprocess];
    Abort[] ];

  {slegs, dim, gauge, nobrk, edit, retain} =
    ParseOpt[PolarizationSum2, opt] /. Options[CalcFeynAmp];

  abbr = OptimizeAbbr[Abbr[]];
  subexpr = OptimizeAbbr[Subexpr[]];
  subexprc = ConjugateRule[subexpr];
  rules = Dispatch[Join[abbr, subexpr, subexprc]];

  (* MK: apply the conjugated subexpressions as well *)
  fullexpr = expr //. rules /. FinalFormRules;
  lor = Cases[fullexpr, _Lor, Infinity] //Union;
  indices = FormIndices[[ Level[lor, {2}] ]];
  fullexpr = fullexpr /. Thread[lor -> indices];

  legs = Cases[fullexpr, Alt[ExtWF][i_] :> i,
    Infinity, Heads -> True] //Union;
  If[ slegs =!= All, legs = Intersection[legs, Flatten[{slegs}]] ];
  masses = Masses[CurrentProc][[legs]];

  fullexpr = fullexpr /. s -> e /. Reverse/@ FromFormRules /.
    {Eps -> "e_", MetricTensor -> "d_", Pair -> Dot} /.
    NoExpandRule /.
    FinalFormRules;

  etasubst = Block[{dv = DownValues[eta], eta},
    Cases[dv, _[_[lhs_], rhs_] :> (lhs -> rhs)] /. Reverse/@ FromFormRules];

  dim = If[dim === 0, D, 4];
  vars = FormVars[dim, {fullexpr, masses}, indices];

  hh = OpenForm["fc-pol-"];
  WriteString[hh, "\
#define Dim \"", ToString[dim], "\"\n\
#define GaugeTerms \"" <> ToString[gauge] <> "\"\n\
#define FermionChains \"None\"\n\n" <>
    vars[[1]] <> "\n\
#procedure EtaSubst\n" <>
    FormId[etasubst] <> "\
#endprocedure\n" <>
    FormProcs <>
    FormConst[vars, nobrk] <>
    FormCode["Common.frm"] <>
    FormCode["PolarizationSum.frm"]];

  Write[hh, "L SquaredME = ", fullexpr, ";"];

  WriteString[hh,
    "\n#call Prepare\n" <>
    MapThread[{"\n#call PolSum(", ToString[#1], ", ", ToForm[#2], ", ",
        ToString[If[FreeQ[fullexpr, (z | zc)[#1]], dim, Dminus4]], ")"}&,
      {legs, masses}] <>
    "\n\n#call Emit\n"];
  Close[hh];

  nobrk = Alt[nobrk];   (* for DotSimplify *)
  FormPre[fullexpr];

  Plus@@ FormOutput[][edit, retain][[1]]
]


(*Simplify Abbreviations and Subexpression*)
GetVariables[abbr_List]:=Map[SubstitutionHead,abbr]
GetValues[abbr_List]:=Map[SubstitutionTail,abbr]
PartQ[expr_,var_]:=!FreeQ[expr,var]
(*PartQ[expr_,varlist_List]:=Map[!FreeQ[expr,#]&,GetVariables[varlist]]*)
CheckAbbr[expr_,subst_]:=Sequence[]/;!PartQ[expr,SubstitutionHead[subst]]
CheckAbbr[expr_,subst_]:=subst/;PartQ[expr,SubstitutionHead[subst]]
RemoveUnusedAbbr[expr_,abbr_]:=OnePassOrder[Map[CheckAbbr[expr,#]&,abbr]]

(*apply the function RemoveUnusedAbbr again and again and look for 
more abbreviations that we need*)
LoopRemove[expr_,abbr_]:=Block[{oldrule,newrule,newexpr},
  oldrule={};
  newrule=RemoveUnusedAbbr[expr,abbr];
  Print["found "<>ToString[Length[newrule]]<>" new rule(s)..."];
  While[And[Length[newrule]!=0,Length[oldrule]<=Length[abbr]],
    newexpr=expr//.Dispatch[(oldrule=OnePassOrder[Join[oldrule,newrule]])];
    newrule=RemoveUnusedAbbr[newexpr,abbr];
    Print["found "<>ToString[Length[newrule]]<>" new rule(s)..."];
  ];
  Print["found a total of "<>ToString[Length[oldrule]]<>" substitution(s)."];
  oldrule
]


SetAttributes[CountArgs,{(*HoldAll,*)Listable}];
CountArgs[f_Symbol]:=With[{dv=DownValues[f]},CountArgs[dv]];
CountArgs[Verbatim[HoldPattern][HoldPattern[f_Symbol[args___]]]:>_]:=CountArgs[f[args]];
CountArgs[f_[Except[_Optional|_OptionsPattern|Verbatim[Pattern][_,_OptionsPattern]],rest___]]:={1,0,0}+CountArgs[f[rest]];
CountArgs[f_[o__Optional,rest___]]:={0,Length[HoldComplete[o]],0}+CountArgs[f[rest]];
CountArgs[f_[_OptionsPattern|Verbatim[Pattern][_,_OptionsPattern]]]:={0,0,1};
CountArgs[f_[]]:={0,0,0};


(*Modifying the On-Shell Amplitudes makes it necessary to rearrange the FormCalc Amplitudes.*)
(*This functions compresses amplitudes with similar summation into a single expression.*)
(*Not using this function if the summation of an amplitude was modified, can cause FormCalc to write multiple times into the same file.*)
Clear[AmpSimplify,EvaluateExpr]
SetAttributes[EvaluateExpr,Orderless];
SetAttributes[AmpSimplify,Orderless];
EvaluateExpr[(amp1_)expr1_,(amp2_)expr2_,x___]:=Sequence[{amp1+amp2,expr1},x]/;expr1===expr2
EvaluateExpr[(amp1_)expr1_,(amp2_)expr2_,x___]:=Sequence[{amp1,expr1},{amp2,expr2},x]/;expr1=!=expr2
AmpSimplify[famp_[process_][amp___]]:=Times@@@famp[process][EvaluateExpr[amp]]

(*Test*)
(*AmpSimplify[Amp[F1][(2+a[i])SumOver[i,2,External],(r*q+b[i])SumOver[i,2,External]]]
AmpSimplify[Amp[F1][(2+a[i])SumOver[i,2,External],(r*q+b[i])SumOver[i,2,External],(c[j]+c[t])SumOver[j,2,External]]]
AmpSimplify[Amp[F1][(2+a[i])SumOver[i,2,External],(c[j]+c[t])SumOver[j,2,External],(r*q+b[i])SumOver[i,2,External]]]
AmpSimplify[Amp[F1][(2+a[i])SumOver[i,2,External],(c[j]+c[t])SumOver[j,2,External],(r*q+b[k])SumOver[k,2,External]]]
AmpSimplify[Amp[F1][(2+a[i])SumOver[i,2,External],(c[j]+c[t])SumOver[j,2,External],(r*q+b[k])SumOver[k,2,External],d[k]SumOver[k,2,External]]]*)


Clear[getName,Cmplx,isComplex]
getName[var_]:=If[Head[var]===Symbol,ToString[var],ToString[Head[var]]]
isComplex[var_]:=If[StringLength[getName[var]]>1,StringTake[getName[var],-1]=="C"||StringTake[getName[var],-1]=="c",False]
Cmplx[a_]:=a
Cmplx[a_]:=a/;isComplex[a]
Cmplx[a_]:=dcmplx[a]/;Simplify[Im[a]==0]

(*Test*)
(*
$Assumptions=_\[Element]Reals;
Cmplx[a]
Cmplx[a+I b]
Cmplx[MZC]
Cmplx[MfC[1,2]]
$Assumptions=True;
*)


(*break line automatically*)
WriteStringn[strm_,str_]:=WriteString[strm,str<>"\n"]


(*Generate unique variable names (even for functions)*)
UniqueName[var_Symbol]:=Unique[var]
UniqueName[var_[arg__]]:=Unique[var][arg]


(*assign values to a list of names*)
AssignValues[ulist_List,val_List]:=MapThread[Set[#1,#2]&,{ulist,val}]//Quiet;


(*Extract only the elements of list with given arguments*)
CheckArgs[expr_]:=False
CheckArgs[expr_,arg__]:=Map[!FreeQ[GetArgument[expr],#]&,Permutations[{arg}]]/.List->Or
FreeArgs[expr_,arg__]:=Map[!CheckArgs[expr,#/.List->Sequence]&,Subsets[{arg}]]/.List->And
ExprWithArgs[expr_,arg__]:=Sequence[]
ExprWithArgs[expr_,arg__]:=expr/;CheckArgs[expr,arg]
ExprWithoutArgs[expr_,arg__]:=Sequence[]
ExprWithoutArgs[expr_,arg__]:=expr/;FreeArgs[expr,arg]
GetElementsWithArgs[list_List,arg__]:=Map[ExprWithArgs[#,arg]&,list]
GetElementsWithoutArgs[list_List,arg__]:=Map[ExprWithoutArgs[#,arg]&,list]


(*Subset of n elements with overhang*)
Subsetn[list_List,n_Integer]:=Block[{subs},Join[subs=Partition[list,n],{Complement[list,Flatten[subs]]}]]/.{}->Sequence[]


(*Split a list into sublists according to their total string length*)
SplitList[list_List,maxStrLn_Integer]:=Block[{s,i,v,out},
  out={};
  v={};
  For[i=1,i<=Length[list],i++,
    If[StringLength[ToString[v]]<maxStrLn,
      v=Join[v,{list[[i]]}];,
      out=Join[out,{v}];
      v={list[[i]]};
    ];
  ];
  out=Join[out,{v}];
  out
]
(*Test*)
(*l={Sfe6,Sfe6c,Sfe7,Sfe7c,Sfe8,Sfe8c,Sfe9,Sfe9c,Sfe10,Sfe10c,Sfe11,Sfe11c,Sfe12,Sfe12c,Sfe13,Sfe13c}
SplitList[l,72]*)


(*Convert a List to a string with comma delimiter*)
ListToString[list_List]:=Block[{i,s},
  s="";
  For[i=1,i<=Length[list],i++,
    s=s<>ToString[list[[i]]];
    If[i<Length[list],s=s<>",";]
  ];
  s
]


(*GetSumIndices[Expr SumOver[Sfe6,2]] yields {Sfe6\[Rule]2}*)
Clear[GetSumIndices,GetSumand]
GetSumIndices[expr_]:={}
GetSumIndices[expr_ s_SumOver]:=Join[{GetArgument[s][[1]]->GetArgument[s][[2]]},GetSumIndices[expr]]
GetSumIndices[expr_ s_FeynArts`SumOver]:=Join[{GetArgument[s][[1]]->GetArgument[s][[2]]},GetSumIndices[expr]]

(*GetSumand[Expr SumOver[Sfe6,2],{Sfe6\[Rule]2}] yields Expr*)
GetSumand[sum_,{}]:=sum
GetSumand[sum_,indices_]:=Coefficient[sum,MapThread[SumOver[#1,#2]&,{GetVariables[indices],GetValues[indices]}]/.List->Times]
GetSumand[sum_,indices_]:=Coefficient[sum,MapThread[FeynArts`SumOver[#1,#2]&,{GetVariables[indices],GetValues[indices]}]/.List->Times]


WriteSpinCorrelatedMatrixElement[name_String,ampmunu_,abbr_List,nlegs_Integer,spinleg_Integer]:=Block[
  {strm,i,j,vars,ulist,indices,indlist,indlist50,indliststr,varlist,varlist50,varliststr,names,ampmunu0,functions,sumindices,indexcomb},

  If[spinleg>nlegs,Print["Error: spinleg > nlegs."];Exit[];];

  (*generate fortran code*)
  strm = OpenFortran[name<>".mf"];
  WriteStringn[strm, "subroutine "<>name<>"(p,ampmunu)"];
  WriteStringn[strm, "implicit none"];
  WriteStringn[strm, "#include \"PhysPars.h\""];
  WriteStringn[strm, "double precision pi"];
  WriteStringn[strm, "parameter (pi = 4.D0*datan(1.D0))"];
  WriteStringn[strm, "double precision p(0:3,"<>ToString[nlegs]<>")"];
  WriteStringn[strm, "double precision al(0:3), be(0:3)"];
  WriteStringn[strm, "double precision eta"<>ToString[spinleg]<>"(0:3)"];
  WriteStringn[strm, "parameter (eta"<>ToString[spinleg]<>" = (/1.,0.,0.,0./))"];
  WriteStringn[strm, "integer alind, beind, i, j"];
  WriteStringn[strm, "double precision ampmunu(0:3,0:3,"<>ToString[nlegs]<>")"];
  For[i=1,i<=nlegs,i++,
    WriteStringn[strm, "double precision k"<>ToString[i]<>"(0:3)"];
  ];
  If[nlegs==4,
    WriteStringn[strm, "double precision S, T, U"];
  ];
  If[nlegs==5,
    WriteStringn[strm, "double precision S, T, U, S34, T14, T24"];
  ];

  (*determine the indices that can occur in our matrix element*)
  ampmunu0 = SplitSums[ampmunu];
  sumindices = Map[GetSumIndices[#]&,ampmunu0];
  ampmunu0 = Map[GetSumand[#,GetSumIndices[#]]&,ampmunu0];
  indices = Apply[Union,sumindices];
  (*bypass errors if indices list is empty*)
  If[Length[indices]==0,
    indices = {Placeholder->0};
  ];
  indexcomb = Subsets[indices];

  (*write out indices*)
  indlist = GetVariables[indices];
  indlist50 = SplitList[indlist,50];
  indliststr = Map[ListToString[#]&,indlist50];
  If[Length[indlist]!=0,
    For[i=1,i<=Length[indliststr],i++,
      WriteStringn[strm, "integer "<>indliststr[[i]]];
    ];
  ];

  (*write out abbreviations and subexpressions*)
  varlist = GetVariables[abbr]/.indices;
  varlist50 = SplitList[Map[FortranForm[#]&,varlist],50];
  varliststr = Map[ListToString[#]&,varlist50];
  If[Length[varlist]!=0,
    For[i=1,i<=Length[varliststr],i++,
      WriteStringn[strm, "double precision "<>varliststr[[i]]];
    ];
  ];

  (*define external functions*)
  WriteStringn[strm, ""];
  WriteStringn[strm, "double precision Epsilon, DotP, Den, Kronecker"];
  WriteStringn[strm, "double precision momsq, momsum2sq, momsum3sq"];
  WriteStringn[strm, "external Epsilon, DotP, Den, Kronecker"];
  WriteStringn[strm, "external momsq, momsum2sq, momsum3sq"];

  (*reset the amplitude*)
  WriteStringn[strm, ""];
  WriteStringn[strm, "ampmunu(:,:,:) = 0D0"];

  (*Momenta and Mandelstams*)
  WriteStringn[strm, "S   = momsum2sq(p(:,1), p(:,2))"];
  WriteStringn[strm, "T   = momsum2sq(p(:,1),-p(:,3))"];
  WriteStringn[strm, "U   = momsum2sq(p(:,2),-p(:,3))"];
  If[nlegs==5,
    WriteStringn[strm, "S34 = momsum2sq(p(:,3), p(:,4))"];
    WriteStringn[strm, "T14 = momsum2sq(p(:,1),-p(:,4))"];
    WriteStringn[strm, "T24 = momsum2sq(p(:,2),-p(:,4))"];
  ];

  WriteStringn[strm, ""];
  WriteStringn[strm, "do i=0,3"];
  WriteStringn[strm, "if(i.eq.0) then"];
  For[i=1,i<=nlegs,i++,
    WriteStringn[strm, "k"<>ToString[i]<>"(i) = p(i,"<>ToString[i]<>")"];
  ];
  WriteStringn[strm, "else"];
  For[i=1,i<=nlegs,i++,
    WriteStringn[strm, "k"<>ToString[i]<>"(i) = -p(i,"<>ToString[i]<>")"];
  ];
  WriteStringn[strm, "endif"];
  WriteStringn[strm, "enddo"];

  (*loop over al and be*)
  WriteStringn[strm, ""];
  WriteStringn[strm, "do alind=0,3"];
  WriteStringn[strm, "do beind=0,3"];
  WriteStringn[strm, ""];
  WriteStringn[strm, "al(:) = 0D0"];
  WriteStringn[strm, "if(alind.eq.0) then"];
  WriteStringn[strm, "al(alind) = 1D0"];
  WriteStringn[strm, "else"];
  WriteStringn[strm, "al(alind) = -1D0"];
  WriteStringn[strm, "endif"];
  WriteStringn[strm, "be(:) = 0D0"];
  WriteStringn[strm, "if(beind.eq.0) then"];
  WriteStringn[strm, "be(beind) = 1D0"];
  WriteStringn[strm, "else"];
  WriteStringn[strm, "be(beind) = -1D0"];
  WriteStringn[strm, "endif"];

  (*calculate abbreviations*)
  vars=GetVariables[abbr];
  (*build a unique list of all local variables*)
  ulist=Map[UniqueName,vars];

  For[i=1,i<=Length[indexcomb],i++,
    If[Length[indexcomb[[i]]]==0,
      Evaluate[ToExpression["FormCalc`VarsOut"<>ToString[i]]] = GetElementsWithoutArgs[vars,Apply[Sequence,GetVariables[Last[indexcomb]]]];
      Evaluate[ToExpression["FormCalc`UlistOut"<>ToString[i]]] = GetElementsWithoutArgs[ulist,Apply[Sequence,GetVariables[Last[indexcomb]]]];,
    (*else*)
      Evaluate[ToExpression["FormCalc`VarsOut"<>ToString[i]]] = GetElementsWithArgs[vars,Apply[Sequence,GetVariables[indexcomb[[i]]]]];
      Evaluate[ToExpression["FormCalc`UlistOut"<>ToString[i]]] = GetElementsWithArgs[ulist,Apply[Sequence,GetVariables[indexcomb[[i]]]]];
    ];
    If[Length[Evaluate[ToExpression["FormCalc`VarsOut"<>ToString[i]]]]!=0,
      WriteStringn[strm, ""];
      For[j=1,j<=Length[indexcomb[[i]]],j++,
        WriteStringn[strm, "do "<>ToString[GetVariables[indexcomb[[i]]][[j]]]<>"=1,"<>ToString[GetValues[indexcomb[[i]]][[j]]]];
      ];
      MapThread[WriteStringn[strm, "      <* "<>ToString[#1]<>" *> = <* "<>ToString[#2]<>" *>" ]&,{Evaluate[ToExpression["FormCalc`VarsOut"<>ToString[i]]],Evaluate[ToExpression["FormCalc`UlistOut"<>ToString[i]]]}];
      For[j=1,j<=Length[indexcomb[[i]]],j++,
        WriteStringn[strm, "enddo"];
      ];
    ];
  ];

  (*substitute wildcards and variable names for the abbreviations and the matrix element*)
  functions = {ToExpression["Pair"]->ToExpression["DotP"],ToExpression["IndexDelta"]->ToExpression["Kronecker"],ToExpression["Eps"]->ToExpression["Epsilon"]};
  names = {eta[i_]:>ToExpression["eta"<>ToString[i]], k[i_]:>ToExpression["k"<>ToString[i]],
           al0->al[0],be0->be[0],ToExpression["deltaalbe"]->ToExpression["al[beind]"],I->ToExpression["ii"],-I->ToExpression["-ii"]};
  For[i=1,i<=nlegs,i++,
    names = Join[names,{ToExpression["k"<>ToString[i]<>"0"]->ToExpression["k"<>ToString[i]<>"[0]"]}];
    names = Join[names,{ToExpression["k"<>ToString[i]<>"al"]->ToExpression["k"<>ToString[i]<>"[alind]"]}];
    names = Join[names,{ToExpression["k"<>ToString[i]<>"be"]->ToExpression["k"<>ToString[i]<>"[beind]"]}];
    names = Join[names,{ToExpression["eta"<>ToString[i]<>"al"]->ToExpression["eta"<>ToString[i]<>"[alind]"]}];
    names = Join[names,{ToExpression["eta"<>ToString[i]<>"be"]->ToExpression["eta"<>ToString[i]<>"[beind]"]}];
  ];

  (*assign the values for the abbreviations*)
  AssignValues[ulist,GetValues[abbr]/.names/.functions];
  
  (*write Matrix element*)
  For[i=1,i<=Length[sumindices],i++,
    Evaluate[ToExpression["FormCalc`AmpMuNuOut"<>ToString[i]]] = ampmunu0[[i]];
    WriteStringn[strm, ""];
    For[j=1,j<=Length[sumindices[[i]]],j++,
      WriteStringn[strm, "do "<>ToString[GetVariables[sumindices[[i]]][[j]]]<>"=1,"<>ToString[GetValues[sumindices[[i]]][[j]]]];
    ];
    WriteStringn[strm, "ampmunu(alind,beind,"<>ToString[spinleg]<>") = ampmunu(alind,beind,"<>ToString[spinleg]<>") + (<* FormCalc`AmpMuNuOut"<>ToString[i]<>" *>)"];
    For[j=1,j<=Length[sumindices[[i]]],j++,
      WriteStringn[strm, "enddo"];
    ];
  ];

  (*end loop over al and be*)
  WriteStringn[strm, ""];
  WriteStringn[strm, "enddo"];
  WriteStringn[strm, "enddo"];

  WriteStringn[strm, ""];
  WriteStringn[strm, "end"];
  Close[strm];

  Splice[name<>".mf", PageWidth -> 72];
]


(*Function to get the coefficient of an factorial expression*)
Clear[DCHelper1,DCHelper,DenCoefficient]
DCHelper1[expr_,denom_]:=
Module[{f},f/;
NumericQ[Denominator[f=Simplify[expr*denom]]]
&&Not[NumericQ[Denominator[expr]]]
&&NumericQ[Simplify[Denominator[Simplify[f/denom]]/denom]]]
DCHelper1[expr_,denom_]:=
Module[{f},0/;
Not[NumericQ[Denominator[Simplify[f=expr*denom]]]]
||NumericQ[Denominator[expr]]
||Not[NumericQ[Simplify[Denominator[Simplify[f/denom]]/denom]]]]
DCHelper[expr_,denom_]:=
Module[{hold},FullSimplify[Plus@@(DCHelper1[#,denom]&/@(List@@(Expand[expr]+hold)))]/.hold->0]
DenCoefficient[expr_,denom_]:=DCHelper[FullSimplify[DCHelper[expr,denom]/denom],denom]
(*
(*Test*)
DenCoefficient[a/(2(a+b^2)),(a+b^2)]
DenCoefficient[a/(2(a+b^2)),(a+b)]
DenCoefficient[a,(a+b)]
DenCoefficient[a/(a+b),(a+b)^2]
DenCoefficient[a/(a+b)^2,(a+b)^2]
DenCoefficient[a/(a+b)^2+a/(a+b)+(a+b)^2/2+b^2/(a^2+2a b+b^2),(a+b)^2]
(*should give 0:*)
DenCoefficient[a^2/(a+b)^4+2a b/(a+b)^4+b^2/(a+b)^4,(a+b)^4]
DenCoefficient[a^2/(a+b)^4+2a b/(a+b)^4+b^2/(a+b)^4,(a+b)^4]
DenCoefficient[a^4/(a+b)^4+(4*a^3*b)/(a+b)^4+(6*a^2*b^2)/(a+b)^4+(4*a*b^3)/(a+b)^4+b^4/(a+b)^4,(a+b)^4]
*)


End[]
EndPackage[]
